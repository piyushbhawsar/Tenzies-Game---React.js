{"ast":null,"code":"// import React from \"react\"\n// import Die from \"./Die\"\n// import { nanoid } from \"nanoid\"\n\n// export default function App() {\n//   const [dice, setDice] = React.useState(generateNewDice)\n//   function generateNewDice(){\n//     const newDice = []\n//     for (let i = 0 ; i<10 ; i++) {\n//       newDice.push({\n//         value: Math.ceil(Math.random()*6),\n//         isHeld: false,\n//         id: nanoid() \n//       })\n//     }\n//     return newDice\n//   }\n\n//   function holdDie(id) {\n//     //find this id's obj in the dice arrOfObj & flip isHeld\n//     setDice(prevDice => prevDice.map(dieObj => {\n//       return dieObj.id===id ? \n//         {\n//           ...dieObj ,\n//           isHeld: !dieObj.isHeld\n//         } :\n//         dieObj\n//       }\n//     ))\n//   }\n//   const dieElements = dice.map(dieObj => (\n//     <Die \n//       key={dieObj.id} \n//       value={dieObj.value} \n//       isHeld={dieObj.isHeld}\n//       holdDie={() => holdDie(dieObj.id)}\n//     />\n//   ))\n//   function rollDie() {\n//     setDice(prevState => generateNewDice())\n//   }\n\n//   return (\n//     <main>\n//       <div className=\"dice-container\">\n//         {dieElements}\n//       </div>\n//       <button\n//         className=\"roll-dice\"\n//         onClick={rollDie}\n//       >\n//         Roll Dice\n//       </button>\n//     </main>\n//   )\n// }\nfunction rollDie() {\n  //roll only thode jinka isHeld false\n  setDice(oldDice => oldDice.map(oldDiceObj => {\n    return oldDiceObj.isHeld ? oldDiceObj : generateDieInstance();\n  }));\n}","map":{"version":3,"names":["rollDie","setDice","oldDice","map","oldDiceObj","isHeld","generateDieInstance"],"sources":["/Users/piyushbhawsar/Desktop/scrimbaVerse/Scrimba-React/tenziesGame/src/App.js"],"sourcesContent":["// import React from \"react\"\n// import Die from \"./Die\"\n// import { nanoid } from \"nanoid\"\n\n// export default function App() {\n//   const [dice, setDice] = React.useState(generateNewDice)\n//   function generateNewDice(){\n//     const newDice = []\n//     for (let i = 0 ; i<10 ; i++) {\n//       newDice.push({\n//         value: Math.ceil(Math.random()*6),\n//         isHeld: false,\n//         id: nanoid() \n//       })\n//     }\n//     return newDice\n//   }\n\n//   function holdDie(id) {\n//     //find this id's obj in the dice arrOfObj & flip isHeld\n//     setDice(prevDice => prevDice.map(dieObj => {\n//       return dieObj.id===id ? \n//         {\n//           ...dieObj ,\n//           isHeld: !dieObj.isHeld\n//         } :\n//         dieObj\n//       }\n//     ))\n//   }\n//   const dieElements = dice.map(dieObj => (\n//     <Die \n//       key={dieObj.id} \n//       value={dieObj.value} \n//       isHeld={dieObj.isHeld}\n//       holdDie={() => holdDie(dieObj.id)}\n//     />\n//   ))\n//   function rollDie() {\n//     setDice(prevState => generateNewDice())\n//   }\n\n//   return (\n//     <main>\n//       <div className=\"dice-container\">\n//         {dieElements}\n//       </div>\n//       <button\n//         className=\"roll-dice\"\n//         onClick={rollDie}\n//       >\n//         Roll Dice\n//       </button>\n//     </main>\n//   )\n// }\n  function rollDie() {\n    //roll only thode jinka isHeld false\n    setDice(oldDice => oldDice.map(oldDiceObj => {\n      return oldDiceObj.isHeld ? \n        oldDiceObj :\n        generateDieInstance()\n    })\n    )\n  }"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,SAASA,OAAOA,CAAA,EAAG;EACjB;EACAC,OAAO,CAACC,OAAO,IAAIA,OAAO,CAACC,GAAG,CAACC,UAAU,IAAI;IAC3C,OAAOA,UAAU,CAACC,MAAM,GACtBD,UAAU,GACVE,mBAAmB,EAAE;EACzB,CAAC,CAAC,CACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}