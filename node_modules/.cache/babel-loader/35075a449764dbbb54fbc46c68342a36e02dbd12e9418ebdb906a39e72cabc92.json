{"ast":null,"code":"var _jsxFileName = \"/Users/piyushbhawsar/Desktop/scrimbaVerse/Scrimba-React/tenziesGame/src/App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Die from \"./Die\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [dice, setDice] = React.useState(generateNewDice);\n  function allNewDice() {\n    const newDice = [];\n    for (let i = 0; i < 10; i++) {\n      newDice.push({\n        value: Math.ceil(Math.random() * 6),\n        isHeld: false,\n        id: nanoid()\n      });\n    }\n    return newDice;\n  }\n  function holdDie(id) {\n    //find this id's obj in the dice arrOfObj & flip isHeld\n    setDice(prevDice => prevDice.map(dieObj => {\n      return dieObj.id === id ? {\n        ...dieObj,\n        isHeld: !dieObj.isHeld\n      } : dieObj;\n    }));\n  }\n  const dieElements = dice.map(dieObj => /*#__PURE__*/_jsxDEV(Die, {\n    value: dieObj.value,\n    isHeld: dieObj.isHeld,\n    holdDie: () => holdDie(dieObj.id)\n  }, dieObj.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this));\n  function rollDie() {\n    setDice(prevState => generateNewDice());\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-container\",\n      children: dieElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"roll-dice\",\n      onClick: rollDie,\n      children: \"Roll Dice\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n// function rollDie() {\n//   //roll only thode jinka isHeld false\n//   setDice(oldDice => oldDice.map(oldDiceObj => {\n//     return oldDiceObj.isHeld ? \n//       oldDiceObj :\n//       generateDieInstance()\n//   })\n//   )\n// }\n_s(App, \"FfYNv95XSdXZ2dLhRPc2OkeM84I=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Die","nanoid","jsxDEV","_jsxDEV","App","_s","dice","setDice","useState","generateNewDice","allNewDice","newDice","i","push","value","Math","ceil","random","isHeld","id","holdDie","prevDice","map","dieObj","dieElements","fileName","_jsxFileName","lineNumber","columnNumber","rollDie","prevState","children","className","onClick","_c","$RefreshReg$"],"sources":["/Users/piyushbhawsar/Desktop/scrimbaVerse/Scrimba-React/tenziesGame/src/App.js"],"sourcesContent":["import React from \"react\"\nimport Die from \"./Die\"\nimport { nanoid } from \"nanoid\"\n\nexport default function App() {\n  const [dice, setDice] = React.useState(generateNewDice)\n  function allNewDice(){\n    const newDice = []\n    for (let i = 0 ; i<10 ; i++) {\n      newDice.push({\n        value: Math.ceil(Math.random()*6),\n        isHeld: false,\n        id: nanoid() \n      })\n    }\n    return newDice\n  }\n\n  function holdDie(id) {\n    //find this id's obj in the dice arrOfObj & flip isHeld\n    setDice(prevDice => prevDice.map(dieObj => {\n      return dieObj.id===id ? \n        {\n          ...dieObj ,\n          isHeld: !dieObj.isHeld\n        } :\n        dieObj\n      }\n    ))\n  }\n  const dieElements = dice.map(dieObj => (\n    <Die \n      key={dieObj.id} \n      value={dieObj.value} \n      isHeld={dieObj.isHeld}\n      holdDie={() => holdDie(dieObj.id)}\n    />\n  ))\n  function rollDie() {\n    setDice(prevState => generateNewDice())\n  }\n\n  return (\n    <main>\n      <div className=\"dice-container\">\n        {dieElements}\n      </div>\n      <button\n        className=\"roll-dice\"\n        onClick={rollDie}\n      >\n        Roll Dice\n      </button>\n    </main>\n  )\n}\n  // function rollDie() {\n  //   //roll only thode jinka isHeld false\n  //   setDice(oldDice => oldDice.map(oldDiceObj => {\n  //     return oldDiceObj.isHeld ? \n  //       oldDiceObj :\n  //       generateDieInstance()\n  //   })\n  //   )\n  // }"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,OAAO;AACvB,SAASC,MAAM,QAAQ,QAAQ;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/B,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,KAAK,CAACS,QAAQ,CAACC,eAAe,CAAC;EACvD,SAASC,UAAUA,CAAA,EAAE;IACnB,MAAMC,OAAO,GAAG,EAAE;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAC,EAAE,EAAGA,CAAC,EAAE,EAAE;MAC3BD,OAAO,CAACE,IAAI,CAAC;QACXC,KAAK,EAAEC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,MAAM,EAAE,GAAC,CAAC,CAAC;QACjCC,MAAM,EAAE,KAAK;QACbC,EAAE,EAAElB,MAAM;MACZ,CAAC,CAAC;IACJ;IACA,OAAOU,OAAO;EAChB;EAEA,SAASS,OAAOA,CAACD,EAAE,EAAE;IACnB;IACAZ,OAAO,CAACc,QAAQ,IAAIA,QAAQ,CAACC,GAAG,CAACC,MAAM,IAAI;MACzC,OAAOA,MAAM,CAACJ,EAAE,KAAGA,EAAE,GACnB;QACE,GAAGI,MAAM;QACTL,MAAM,EAAE,CAACK,MAAM,CAACL;MAClB,CAAC,GACDK,MAAM;IACR,CAAC,CACF,CAAC;EACJ;EACA,MAAMC,WAAW,GAAGlB,IAAI,CAACgB,GAAG,CAACC,MAAM,iBACjCpB,OAAA,CAACH,GAAG;IAEFc,KAAK,EAAES,MAAM,CAACT,KAAM;IACpBI,MAAM,EAAEK,MAAM,CAACL,MAAO;IACtBE,OAAO,EAAEA,CAAA,KAAMA,OAAO,CAACG,MAAM,CAACJ,EAAE;EAAE,GAH7BI,MAAM,CAACJ,EAAE;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAKjB,CAAC;EACF,SAASC,OAAOA,CAAA,EAAG;IACjBtB,OAAO,CAACuB,SAAS,IAAIrB,eAAe,EAAE,CAAC;EACzC;EAEA,oBACEN,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAK6B,SAAS,EAAC,gBAAgB;MAAAD,QAAA,EAC5BP;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACR,eACNzB,OAAA;MACE6B,SAAS,EAAC,WAAW;MACrBC,OAAO,EAAEJ,OAAQ;MAAAE,QAAA,EAClB;IAED;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACJ;AAEX;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAvB,EAAA,CA5DsBD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}